// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StatusType {
  id        String    @id @default(cuid())
  name      String    @unique @db.VarChar(50)
  statuses  Status[] // Relation One-to-Many
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Status {
  id           String     @id @default(cuid())
  name         String     @unique @db.VarChar(50)
  statusTypeId String
  statusType   StatusType @relation(fields: [statusTypeId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  users         User[]
  organizations Organization[]
  restaurants   Restaurant[]
  surveys       Survey[]
  customers     Customer[]
  products      Product[]
  orders        Order[]
  modules       Module[]
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  permissions RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
}

model Permission {
  id        String           @id @default(cuid())
  name      String           @unique
  roles     RolePermission[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
}

// Junction model Role and Permission
model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

enum LogType {
  login
  logout
}

model LogsUser {
  id        String    @id @default(cuid())
  type      LogType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model User {
  id              String    @id @default(cuid())
  firstName       String    @db.VarChar(50)
  lastName        String?   @db.VarChar(50)
  phone           String    @db.VarChar(15)
  email           String    @unique
  city            String
  neighborhood    String
  picture         Bytes
  statusId        String
  status          Status    @relation(fields: [statusId], references: [id])
  password        String    @db.VarChar(64)
  temporyPassword String    @db.VarChar(64)
  expiryPassword  DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  restaurants   UserRestaurant[]
  organizations UserOrganization[]
  surveys       UserSurvey[]
}

model Organization {
  id           String    @id @default(cuid())
  name         String
  description  String?   @db.VarChar(185)
  phone        String    @db.VarChar(15)
  email        String    @unique
  city         String?
  neighborhood String?
  picture      Bytes
  statusId     String
  status       Status    @relation(fields: [statusId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  users     UserOrganization[]
  customers CustomerOrganization[]
}

model UserOrganization {
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId])
}

model Restaurant {
  id           String         @id @default(cuid())
  name         String
  description  String         @db.VarChar(185)
  phone        String         @db.VarChar(15)
  email        String         @unique
  city         String
  neighborhood String
  picture      Bytes
  webpage      String
  statusId     String
  status       Status         @relation(fields: [statusId], references: [id])
  modules      EntityModule[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  users            UserRestaurant[]
  primaryCustomers Customer[]           @relation("PrimaryCustomerRestaurant")
  customers        CustomerRestaurant[]
  orders           Order[]
  tables           Table[]
}

model UserRestaurant {
  userId       String
  restaurantId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@id([userId, restaurantId])
}

model Survey {
  id                  String    @id @default(cuid())
  name                String
  surveyForm          Json?
  surveyFormCreatedAt DateTime?
  statusId            String
  status              Status    @relation(fields: [statusId], references: [id])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?

  users   UserSurvey[]
  answers SurveyAnswer[]
}

model Answer {
  id             String    @id @default(cuid())
  name           String
  surveyFormData Json?
  customerId     String?
  customer       Customer? @relation(fields: [customerId], references: [id])

  surveys   SurveyAnswer[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
}

model UserSurvey {
  userId    String
  surveyId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  survey Survey @relation(fields: [surveyId], references: [id])

  @@id([userId, surveyId])
}

model SurveyAnswer {
  surveyId  String
  answerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  survey Survey @relation(fields: [surveyId], references: [id])
  answer Answer @relation(fields: [answerId], references: [id])

  @@id([surveyId, answerId])
}

model Customer {
  id           String    @id @default(cuid())
  firstName    String    @db.VarChar(50)
  lastName     String?   @db.VarChar(50)
  phone        String?   @db.VarChar(15)
  email        String?   @unique
  city         String?
  neighborhood String?
  picture      Bytes?
  statusId     String
  status       Status    @relation(fields: [statusId], references: [id])
  password     String?   @db.VarChar(64)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // New relations
  primaryRestaurantId String
  primaryRestaurant   Restaurant @relation("PrimaryCustomerRestaurant", fields: [primaryRestaurantId], references: [id])

  organizations CustomerOrganization[]
  restaurants   CustomerRestaurant[]
  answers       Answer[]
  Order         Order[]
}

model CustomerRestaurant {
  customerId   String
  restaurantId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  customer   Customer   @relation(fields: [customerId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@id([customerId, restaurantId])
}

model CustomerOrganization {
  customerId     String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  customer     Customer     @relation(fields: [customerId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@id([customerId, organizationId])
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[]
}

model Product {
  id                String          @id @default(cuid())
  name              String
  description       String?
  price             Decimal
  picture           Bytes
  statusId          String
  status            Status          @relation(fields: [statusId], references: [id])
  productCategoryId String
  categories        ProductCategory @relation(fields: [productCategoryId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  stocks            Stock[]
  orderProduct      OrderProduct[]
}

model PaymentStatus {
  id        String   @id @default(cuid())
  name      String   @unique
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id        String   @id @default(cuid())
  name      String   @unique
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String         @id @default(cuid())
  orderNumber     String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  paymentStatusId String
  paymentStatus   PaymentStatus  @relation(fields: [paymentStatusId], references: [id])
  paymentMethodId String
  paymentMethod   PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  totalAmount     Float
  notes           String?
  customerId      String?
  customer        Customer?      @relation(fields: [customerId], references: [id])
  restaurantId    String
  restaurant      Restaurant     @relation(fields: [restaurantId], references: [id])
  products        OrderProduct[]
  statusId        String?
  status          Status?        @relation(fields: [statusId], references: [id])
}

model OrderProduct {
  id          String  @id @default(cuid())
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  customNotes String?
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id])
  productId   String
  product     Product @relation(fields: [productId], references: [id])
}

model Stock {
  id           String    @id @default(cuid())
  quantity     Int
  movementType String
  movementDate DateTime
  productId    String
  products     Product   @relation(fields: [productId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model Table {
  id           String     @id @default(cuid())
  name         String
  capacity     Int
  webpage      String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Module {
  id          String         @id @default(cuid())
  name        String
  description String
  statusId    String
  status      Status?        @relation(fields: [statusId], references: [id])
  entities    EntityModule[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
}

model EntityModule {
  id           String     @id @default(cuid())
  moduleId     String
  restaurantId String
  type         String
  module       Module     @relation(fields: [moduleId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  @@unique([moduleId, restaurantId]) // Contrainte unique pour éviter les doublons
}
