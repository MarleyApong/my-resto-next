generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BaseMenu {
  id                String                   @id @default(uuid()) @db.VarChar(36)
  name              String
  description       String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  baseSpecificPerms BaseSpecificPermission[]
  organizationMenus OrganizationMenu[]
  roleMenus         RoleMenu[]
}

model BaseSpecificPermission {
  id                String                           @id @default(uuid()) @db.VarChar(36)
  name              String // ex: "update_status", "update_picture"
  description       String?                          @db.VarChar(180)
  baseMenu          BaseMenu                         @relation(fields: [baseMenuId], references: [id])
  baseMenuId        String
  createdAt         DateTime                         @default(now())
  updatedAt         DateTime                         @updatedAt
  orgSpecificPerms  OrganizationSpecificPermission[]
  roleSpecificPerms RoleSpecificPermission[]

  @@unique([name, baseMenuId])
}

model OrganizationMenu {
  id                  String                           @id @default(uuid()) @db.VarChar(36)
  organization        Organization                     @relation(fields: [organizationId], references: [id])
  organizationId      String
  baseMenu            BaseMenu                         @relation(fields: [baseMenuId], references: [id])
  baseMenuId          String
  create              Boolean                          @default(false)
  view                Boolean                          @default(false)
  update              Boolean                          @default(false)
  delete              Boolean                          @default(false)
  createdAt           DateTime                         @default(now())
  updatedAt           DateTime                         @updatedAt
  specificPermissions OrganizationSpecificPermission[]
  roleMenus           RoleMenu[]

  @@unique([organizationId, baseMenuId])
}

model OrganizationSpecificPermission {
  id                 String                   @id @default(uuid()) @db.VarChar(36)
  organizationMenu   OrganizationMenu         @relation(fields: [orgMenuId], references: [id])
  orgMenuId          String
  baseSpecificPerm   BaseSpecificPermission   @relation(fields: [baseSpecificPermId], references: [id])
  baseSpecificPermId String
  granted            Boolean                  @default(false)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  roleSpecificPerms  RoleSpecificPermission[]

  @@unique([orgMenuId, baseSpecificPermId])
}

// Rôle (back office si organizationId est null)
model Role {
  id             String        @id @default(uuid()) @db.VarChar(36)
  name           String        @db.VarChar(25)
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  description    String?       @db.VarChar(180)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  users          User[]
  roleMenus      RoleMenu[]

  @@unique([name, organizationId])
}

model RoleMenu {
  id                  String                   @id @default(uuid()) @db.VarChar(36)
  role                Role                     @relation(fields: [roleId], references: [id])
  roleId              String
  // Un menu de rôle est soit lié directement à un BaseMenu (back office)
  // soit à un OrganizationMenu (rôle d'organisation)
  baseMenu            BaseMenu?                @relation(fields: [baseMenuId], references: [id])
  baseMenuId          String?
  organizationMenu    OrganizationMenu?        @relation(fields: [orgMenuId], references: [id])
  orgMenuId           String?
  create              Boolean                  @default(false)
  view                Boolean                  @default(false)
  update              Boolean                  @default(false)
  delete              Boolean                  @default(false)
  specificPermissions RoleSpecificPermission[]
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt

  @@unique([roleId, baseMenuId])
  @@unique([roleId, orgMenuId])
}

model RoleSpecificPermission {
  id                 String                          @id @default(uuid()) @db.VarChar(36)
  roleMenu           RoleMenu                        @relation(fields: [roleMenuId], references: [id])
  roleMenuId         String
  baseSpecificPerm   BaseSpecificPermission?         @relation(fields: [baseSpecificPermId], references: [id])
  baseSpecificPermId String?
  orgSpecificPerm    OrganizationSpecificPermission? @relation(fields: [orgSpecificPermId], references: [id])
  orgSpecificPermId  String?
  granted            Boolean                         @default(false)
  createdAt          DateTime                        @default(now())
  updatedAt          DateTime                        @updatedAt

  @@unique([roleMenuId, baseSpecificPermId])
  @@unique([roleMenuId, orgSpecificPermId])
}

model Action {
  id        String     @id @default(uuid()) @db.VarChar(36)
  name      String     @unique @db.VarChar(25) // CREATE, UPDATE, DELETE
  auditLogs AuditLog[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([name])
}

model AuditLog {
  id         String   @id @default(uuid()) @db.VarChar(36)
  actionId   String
  action     Action   @relation(fields: [actionId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  entityId   String
  entityType String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([actionId])
  @@index([userId])
  @@index([entityType, entityId])
}

model StatusType {
  id        String    @id @default(uuid()) @db.VarChar(36)
  name      String    @unique @db.VarChar(50)
  status    Status[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name])
}

model Status {
  id            String         @id @default(uuid()) @db.VarChar(36)
  name          String         @db.VarChar(50)
  statusTypeId  String
  statusType    StatusType     @relation(fields: [statusTypeId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  users         User[]
  organizations Organization[]
  restaurants   Restaurant[]
  surveys       Survey[]
  customers     Customer[]
  products      Product[]
  orders        Order[]

  @@unique([name, statusTypeId])
  @@index([statusTypeId])
  @@index([name])
}

model LogType {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(50)
  logsUsers LogsUser[]

  @@index([name])
}

model LogsUser {
  id        Int       @id @default(autoincrement())
  logTypeId Int
  logType   LogType   @relation(fields: [logTypeId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([logTypeId])
}

model User {
  id              String             @id @default(uuid()) @db.VarChar(36)
  firstname       String             @db.VarChar(50)
  lastname        String?            @db.VarChar(50)
  phone           String             @db.VarChar(15)
  email           String             @unique @db.VarChar(100)
  city            String?            @db.VarChar(100)
  neighborhood    String?            @db.VarChar(100)
  picture         String?
  roleId          String?
  role            Role?              @relation(fields: [roleId], references: [id])
  statusId        String
  status          Status             @relation(fields: [statusId], references: [id])
  password        String             @db.VarChar(64)
  temporyPassword String?            @db.VarChar(64)
  expiryPassword  DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  deletedAt       DateTime?
  restaurants     UserRestaurant[]
  organizations   UserOrganization[]
  surveys         UserSurvey[]
  sessions        Session[]
  auditLogs       AuditLog[]

  @@index([email])
  @@index([roleId])
  @@index([statusId])
  @@index([firstname, lastname])
  @@index([phone])
}

model Session {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  valid        Boolean   @default(true)
  userAgent    String?   @db.Text
  ipAddress    String?   @db.VarChar(45)
  lastActivity DateTime  @default(now())
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@index([userId])
  @@index([valid])
  @@index([expiresAt])
}

model Organization {
  id                 String                 @id @default(uuid()) @db.VarChar(36)
  name               String                 @db.VarChar(100)
  description        String?                @db.VarChar(185)
  phone              String                 @db.VarChar(15)
  email              String?                @unique @db.VarChar(100)
  city               String?                @db.VarChar(100)
  neighborhood       String?                @db.VarChar(100)
  picture            String
  statusId           String
  status             Status                 @relation(fields: [statusId], references: [id])
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  deletedAt          DateTime?
  users              UserOrganization[]
  customers          CustomerOrganization[]
  restaurants        Restaurant[]
  roles              Role[]
  organizationsMenus OrganizationMenu[]

  @@index([statusId])
  @@index([email])
  @@index([phone])
  @@index([name])
}

model UserOrganization {
  userId         String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Restaurant {
  id               String               @id @default(uuid()) @db.VarChar(36)
  name             String
  description      String               @db.VarChar(185)
  phone            String               @db.VarChar(15)
  email            String               @unique @db.VarChar(100)
  city             String
  neighborhood     String
  picture          String
  webpage          String
  statusId         String
  status           Status               @relation(fields: [statusId], references: [id])
  organizationId   String               @db.VarChar(25)
  organization     Organization         @relation(fields: [organizationId], references: [id])
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  deletedAt        DateTime?
  users            UserRestaurant[]
  primaryCustomers Customer[]           @relation("PrimaryCustomerRestaurant")
  customers        CustomerRestaurant[]
  orders           Order[]
  tables           Table[]

  @@index([city, neighborhood])
  @@index([statusId])
  @@index([organizationId])
}

model UserRestaurant {
  userId       String
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@id([userId, restaurantId])
}

model Survey {
  id                  String         @id @default(uuid()) @db.VarChar(36)
  name                String
  surveyForm          Json?
  surveyFormCreatedAt DateTime?
  statusId            String
  status              Status         @relation(fields: [statusId], references: [id])
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?
  users               UserSurvey[]
  answers             SurveyAnswer[]

  @@index([statusId])
}

model Answer {
  id             String         @id @default(uuid()) @db.VarChar(36)
  name           String
  surveyFormData Json?
  customerId     String?
  customer       Customer?      @relation(fields: [customerId], references: [id])
  surveys        SurveyAnswer[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?

  @@index([customerId])
}

model UserSurvey {
  userId    String
  surveyId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  survey    Survey   @relation(fields: [surveyId], references: [id])

  @@id([userId, surveyId])
}

model SurveyAnswer {
  surveyId  String
  answerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  survey    Survey   @relation(fields: [surveyId], references: [id])
  answer    Answer   @relation(fields: [answerId], references: [id])

  @@id([surveyId, answerId])
}

model Customer {
  id                  String                 @id @default(uuid()) @db.VarChar(36)
  firstName           String                 @db.VarChar(50)
  lastName            String?                @db.VarChar(50)
  phone               String?                @db.VarChar(15)
  email               String?                @unique
  city                String?
  neighborhood        String?
  picture             String?
  statusId            String
  status              Status                 @relation(fields: [statusId], references: [id])
  password            String?                @db.VarChar(64)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  deletedAt           DateTime?
  primaryRestaurantId String
  primaryRestaurant   Restaurant             @relation("PrimaryCustomerRestaurant", fields: [primaryRestaurantId], references: [id])
  organizations       CustomerOrganization[]
  restaurants         CustomerRestaurant[]
  answers             Answer[]
  orders              Order[]

  @@index([statusId])
  @@index([email])
  @@index([city, neighborhood])
}

model CustomerRestaurant {
  customerId   String
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  customer     Customer   @relation(fields: [customerId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@id([customerId, restaurantId])
}

model CustomerOrganization {
  customerId     String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  customer       Customer     @relation(fields: [customerId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([customerId, organizationId])
}

model ProductCategory {
  id          String    @id @default(uuid()) @db.VarChar(36)
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[]
}

model Product {
  id                String          @id @default(uuid()) @db.VarChar(36)
  name              String
  description       String?
  price             Decimal
  picture           String
  statusId          String
  status            Status          @relation(fields: [statusId], references: [id])
  productCategoryId String
  categories        ProductCategory @relation(fields: [productCategoryId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  stocks            Stock[]
  orderProduct      OrderProduct[]

  @@index([statusId])
  @@index([productCategoryId])
}

model PaymentStatus {
  id        String   @id @default(uuid()) @db.VarChar(36)
  name      String   @unique
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id        String   @id @default(uuid()) @db.VarChar(36)
  name      String   @unique
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String         @id @default(uuid()) @db.VarChar(36)
  orderNumber     String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  paymentStatusId String
  paymentStatus   PaymentStatus  @relation(fields: [paymentStatusId], references: [id])
  paymentMethodId String
  paymentMethod   PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  totalAmount     Float
  notes           String?
  customerId      String?
  customer        Customer?      @relation(fields: [customerId], references: [id])
  restaurantId    String
  restaurant      Restaurant     @relation(fields: [restaurantId], references: [id])
  products        OrderProduct[]
  statusId        String?
  status          Status?        @relation(fields: [statusId], references: [id])

  @@index([paymentStatusId])
  @@index([paymentMethodId])
  @@index([restaurantId])
}

model OrderProduct {
  id          String  @id @default(uuid()) @db.VarChar(36)
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  customNotes String?
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id])
  productId   String
  product     Product @relation(fields: [productId], references: [id])
}

model Stock {
  id           String    @id @default(uuid()) @db.VarChar(36)
  quantity     Int
  movementType String
  movementDate DateTime
  productId    String
  products     Product   @relation(fields: [productId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model Table {
  id           String     @id @default(uuid()) @db.VarChar(36)
  name         String
  capacity     Int
  webpage      String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  @@index([restaurantId])
  @@index([webpage])
}
